#N canvas 467 36 561 528 10;
#X declare -lib pdlua -path pdlua;
#X declare -path pdlua/examples;
#X msg 55 227 load hello.lua;
#X text 16 358 See also:;
#X obj 351 234 hello;
#X obj 55 257 pdlua;
#X obj 81 359 pdluax hello;
#X obj 4 397 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 432 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 467 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 143 406 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 4 500 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X text 243 442 NONE;
#X text 243 477 NONE;
#X text 177 407 load <symbol>;
#X text 151 226 <-- load and run a Lua file;
#X text 91 257 <-- global interface to pdlua;
#X obj 306 4 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 305 3 pd;
#X obj 315 18 cnv 10 10 10 empty empty Load\ externals\ written\ in\ Lua 0 6 2 20 #7c7c7c #e0e4dc 0;
#X obj 3 3 cnv 15 301 42 empty empty pdlua 20 20 2 37 #e0e0e0 #000000 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1 0 0;
#X restore 3 3 graph;
#X text 390 233 <- right click for help or open, f 16;
#X text 22 60 [pdlua] registers a loader that allows Pd externals written in Lua (with the "*.pd_lua" extension) to be loaded. To guarantee Pd will load these externals \, you should load [pdlua] as a library \, either at startup or with [delcare]:, f 80;
#X text 75 114 loading [pdlua] from [declare] -->;
#X text 261 407 - load and run a '*.lua' file;
#X text 334 346 Details on writting lua externals ----->, f 23;
#X text 23 291 The [hello] object above is loaded from a 'hello.pd_lua' file. You can also provide help files for it and right click on it to ask for them. Right click also allows you to open the .pd_lua file if your system has a known application for it., f 80;
#X text 164 353 (this version loads files as arguments), f 20;
#X obj 290 115 declare -lib pdlua -path pdlua;
#X text 23 146 If you also create [pdlua] as an object as below \, a global interface is created to load and run "*.lua" files via the 'load' message. Make sure that Pd is aware of the paths where your .pd_lua externals and .lua files are - you can also use declare for this (see that above we also include '-path pdlua' so it finds the 'hello' external and its help file)., f 80;
#N canvas 567 120 718 519 quickstart 0;
#X obj 47 83 cnv 15 450 140 empty empty pdlua\ HOWTO 20 12 0 15 #dfdfdf #000000 0;
#X obj 47 224 cnv 15 450 140 empty empty -\ Class\ Creation: 20 12 0 14 #cccccc #000000 0;
#X obj 47 365 cnv 15 450 300 empty empty -\ Object\ Initialization: 20 12 0 14 #dfdfdf #000000 0;
#X obj 47 666 cnv 15 450 120 empty empty empty 20 12 0 14 #cccccc #404040 0;
#X obj 47 787 cnv 15 450 170 empty empty empty 20 12 0 14 #dfdfdf #404040 0;
#X obj 47 1661 cnv 15 450 100 empty empty -\ Sending\ To\ Receivers: 20 12 0 14 #dfdfdf #000000 0;
#X obj 47 1762 cnv 15 450 120 empty empty -\ Receivers: 20 12 0 14 #cccccc #000000 0;
#X text 65 113 The Lua loader included in -lib pdlua allows externals for Pd to be written in the Lua programming language. (http://www.lua.org/), f 65;
#X text 65 145 If you try to create an object [foo] in Pd \, Pd checks if the class "foo" exists. If it doesn't \, it tries to load an external file that "probably" will contain code for "foo". The Lua loader adds support for loading "foo.pd_lua" when you try to create [foo]., f 65;
#X obj 47 958 cnv 15 450 70 empty empty -\ Object\ Finalization: 20 12 0 14 #cccccc #000000 0;
#X text 76 309 This creates a new Pd class called "foo". The 'local' declaration is optional \, but recommended -- without it \, 'foo' is global \, which means any Lua code can modify it (possibly by accident)., f 61;
#X text 75 251 The first expression/statement in the text file "foo.pd_lua" should be of the form:;
#X obj 47 1029 cnv 15 450 400 empty empty -\ Inlet\ Methods: 20 12 0 14 #dfdfdf #000000 0;
#X text 65 476 or equivalently:;
#X obj 47 1430 cnv 15 450 230 empty empty -\ Sending\ To\ Outlets: 20 12 0 14 #cccccc #000000 0;
#X text 65 390 Then you can add methods to the Pd class. The most important one is 'initialize' \, which is executed when a new object is created:, f 65;
#X text 81 578 [foo a b 1 2 3 c];
#X text 65 549 'sel' is usually (always?) the class name \, 'atoms' are the creation arguments in a Lua table. For example a Pd object, f 61;
#X text 66 596 would have sel equal to "foo" and the atoms:;
#X text 65 670 Being a method \, 'initialize' has a 'self' variable (which is the object to be created) \, and if you want your objects to have inlets or outlets you need need to set those fields in this method (Pd doesn't support changing the number of inlets or outlets after an object is created):;
#X text 65 769 The default inlet/outlet counts are 0;
#X text 65 792 The return value of 'initialize' is used to allow objects to fail to create (for example \, if the creation arguments are bad). Most of the time you will 'return true' \, but if you really can't create then you can 'return false'.;
#X text 65 980 The 'finalize' method is called when the object is deleted by Pd. You can clean up stuff here if needed. The default implementation does nothing.;
#X text 65 1680 You can send messages to receivers like this:;
#X text 65 631 where <> should be curly brackets \, but Pd won't print them in a comment., f 60;
#X text 79 1722 (again the <> represent curly brackets);
#X text 66 1842 Remember to clean up your receivers in object:finalize() \, or weird things will happen., f 57;
#X obj 47 1883 cnv 15 450 120 empty empty -\ Clocks: 20 12 0 14 #dfdfdf #000000 0;
#X obj 47 2004 cnv 15 450 140 empty empty -\ Miscellaneous\ Object\ Methods: 20 12 0 14 #cccccc #000000 0;
#X text 66 1909 You can bind methods to clocks \, for timing based on Pd's logical clock.;
#X text 66 1952 Remember to clean up your clocks in object:finalize() \, or weird things will happen.;
#X text 65 2024 Execute a Lua file using Pd's path to find it:;
#X text 65 2066 Report an error to Pd's console:;
#X obj 47 2145 cnv 15 450 80 empty empty -\ Miscellaneous\ Functions: 20 12 0 14 #dfdfdf #000000 0;
#X text 65 2169 Print a string to Pd's console:;
#X text 65 2206 Note that pd.post() should not really be used for errors.;
#X text 65 1784 You can bind methods to receivers \, to get messages from [send receiver] and " \; receiver message"., f 52;
#X obj 83 284 cnv 15 300 20 empty empty empty 15 10 0 14 #ffffff #202020 0;
#X obj 82 422 cnv 15 300 50 empty empty empty 20 12 0 14 #ffffff #404040 0;
#X obj 82 495 cnv 15 300 50 empty empty empty 20 12 0 14 #ffffff #404040 0;
#X text 89 424 function foo:initialize(sel \, atoms);
#X text 90 437 -- code;
#X text 90 451 end;
#X text 90 499 foo.initialize = function (self \, sel \, atoms);
#X text 89 513 -- code;
#X text 90 526 end;
#X obj 122 894 cnv 15 300 50 empty empty empty 20 12 0 14 #ffffff #404040 0;
#X obj 82 736 cnv 15 300 30 empty empty empty 20 12 0 14 #ffffff #404040 0;
#X text 82 615 <"a" \, "b" \, 1 \, 2 \, 3 \, "c">;
#X text 90 736 self.inlets = 1;
#X text 129 896 function foo:postinitialize();
#X text 129 910 -- code;
#X text 130 925 end;
#X obj 82 2042 cnv 15 300 20 empty empty empty 20 12 0 14 #ffffff #404040 0;
#X obj 82 2085 cnv 15 300 20 empty empty empty 20 12 0 14 #ffffff #404040 0;
#X obj 82 2186 cnv 15 300 20 empty empty empty 20 12 0 14 #ffffff #404040 0;
#X text 90 2044 self:dofile("filename");
#X text 90 2088 self:error("message");
#X text 90 2188 pd.post("a string");
#X obj 514 1698 bng 20 250 50 0 empty empty empty 17 7 0 10 #dfdfdf #000000 #000000;
#X floatatom 632 1814 3 0 0 0 - - - 0;
#X text 66 1821 See doc/examples/lreceive.pd_lua for details.;
#X text 81 1743 See doc/examples/lsend.pd_lua for details.;
#X text 66 1937 See doc/examples/ldelay.pd_lua for details.;
#X obj 514 1730 lsend splat-1;
#X obj 549 1705 lsend splat-2;
#X obj 509 1784 lreceive splat- 1 2 3;
#X obj 534 1930 ldelay 1000;
#X text 65 1054 Each inlet should have at least one method that will be called when an item it can handle arrives at that input.;
#X obj 91 1139 cnv 15 300 50 empty empty empty 20 12 0 14 #ffffff #404040 0;
#X text 98 1143 function foo:in_1_float(f);
#X text 97 1156 -- code;
#X text 99 1169 end;
#X text 75 1273 A "gimme" method for [foo] accepts any input:;
#X obj 92 1488 cnv 15 300 20 empty empty empty 20 12 0 14 #ffffff #404040 0;
#X text 99 1492 self:outlet(2 \, "bang" \, <>);
#X text 63 1511 (as usual <> should be curly brackets);
#X text 65 1467 This will cause the second outlet to emit a bang:;
#X obj 92 1558 cnv 15 300 20 empty empty empty 20 12 0 14 #ffffff #404040 0;
#X text 65 1537 This will cause the second outlet to emit a float:;
#X text 99 1562 self:outlet(2 \, "float" \, <123>);
#X obj 92 1608 cnv 15 300 40 empty empty empty 20 12 0 14 #ffffff #404040 0;
#X text 65 1586 This will cause the first outlet to emit a list:;
#X text 99 1629 self:outlet(1 \, "list" \, somelist);
#X text 99 1612 self.somelist = <some items in a list>;
#X text 75 1195 A "stop" method for inlet 2 of [foo]:;
#X text 65 1084 The name of the method is constructed as "in_n_selector" where n is the inlet number (starting from 1) and selector is a type such as "float" or "bang" \, or a selector name such as "start". Here is a float method for [foo] inlet 1:;
#X obj 72 1697 cnv 15 360 20 empty empty empty 20 12 0 14 #ffffff #404040 0;
#X text 78 1699 pd.send("receiver" \, "selector" \, <"a" \, "message" \, 1 \, 2 \, 3>;
#X text 75 1350 A method for symbols on any input:;
#X text 65 846 If you need to do things after the Pd object is created \, but before control is returned to Pd \, (such as registering receivers or clocks) you can use the 'postinitialize' method:;
#X text 65 2106 This will allow the object to be highlighted from Pd's menu using Find->Find Last Error.;
#X text 90 752 self.outlets = 2;
#X text 65 1449 Use self:outlet(outlet_number \, type \, table);
#X text 102 287 local foo = pd.Class:new():register("foo");
#X obj 91 1216 cnv 15 300 50 empty empty empty 20 12 0 14 #ffffff #404040 0;
#X obj 91 1294 cnv 15 300 50 empty empty empty 20 12 0 14 #ffffff #404040 0;
#X obj 91 1371 cnv 15 300 50 empty empty empty 20 12 0 14 #ffffff #404040 0;
#X text 97 1233 -- code;
#X text 99 1246 end;
#X text 97 1311 -- code;
#X text 99 1324 end;
#X text 98 1298 function foo:in_1(sel \, atoms);
#X text 98 1220 function foo:in_2_stop();
#X text 97 1388 -- code;
#X text 99 1401 end;
#X text 98 1375 function foo:in_n_symbol(i \, s);
#X obj 509 1814 route bang float;
#X obj 509 1841 bng 20 250 50 0 empty empty empty 17 7 0 10 #dfdfdf #000000 #000000;
#X floatatom 555 1844 5 0 0 0 - - - 0;
#X msg 549 1672 100;
#X msg 587 1672 1000;
#X obj 534 1900 bng 20 250 50 0 empty empty empty 17 7 0 10 #dfdfdf #000000 #000000;
#X obj 534 1955 bng 20 250 50 0 empty empty empty 17 7 0 10 #dfdfdf #000000 #000000;
#X obj 46 2226 cnv 17 450 20 empty empty empty 20 12 0 14 #cccccc #404040 0;
#X text 71 2229 (modified from doc/examples/pdlua/lua.txt by mrpeach 2011/10/06), f 64;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 167 101 1;
#X restore 497 1661 graph;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 167 120 1;
#X restore 497 1762 graph;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 167 121 1;
#X restore 497 1882 graph;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 451 2163 1;
#X restore 46 82 graph;
#X text 69 21 Find basic instructions/examples below on how to write externals in Lua. For a detailed tutorial \, check the 'pdlua/tutorial' folder for a PDF documente. You can also find this tutorial online at: https://agraef.github.io/pd-lua/tutorial/pd-lua-intro.html, f 66;
#X obj 515 1624 declare -path pdlua/examples;
#X text 549 1602 Examples from:;
#X connect 59 0 64 0;
#X connect 66 0 107 0;
#X connect 66 1 60 0;
#X connect 67 0 113 0;
#X connect 107 0 108 0;
#X connect 107 1 109 0;
#X connect 110 0 65 0;
#X connect 111 0 65 0;
#X connect 112 0 67 0;
#X restore 438 364 pd quickstart;
#X connect 0 0 3 0;
